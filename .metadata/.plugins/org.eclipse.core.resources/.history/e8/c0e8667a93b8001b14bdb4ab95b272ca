package com.mt.orchardcodecamp.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

//secuity configuration can be done by extending the websecurityconfigureradapter


@EnableWebSecurity
public class OrchardSecurityConfiguration extends WebSecurityConfigurerAdapter {
	//@Autowired
	//UserDetailsService userDetailsService;

	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {

		//auth.userDetailsService(userDetailsService);

	   /8
		 // In memory authentication 
		auth.inMemoryAuthentication() .withUser("mind1")
		 .password("mind1") .roles("MIND") .and() .withUser("mind2")
		 .password("mind2") .roles("MIND") .and() .withUser("mind3")
		  .password("mind3") .roles("MIND") .and() .withUser("lead") .password("lead")
		  .roles("LEAD") .and() .withUser("lead2") .password("lead2") .roles("LEAD")
		 .and() .withUser("lead3") .password("lead3") .roles("LEAD"); 
		*/
		 
	}

	@Bean
	public PasswordEncoder getPassword() {
		return NoOpPasswordEncoder.getInstance();
	}

	// authorization using HTTPSecurity
	/*
	 * @Override protected void configure(HttpSecurity http) throws Exception {
	 * http.authorizeRequests()
	 * 
	 * .antMatchers("/orchardlead",
	 * "/orchardtrack").hasRole("LEAD").antMatchers("/orchardmind")
	 * .hasRole("MIND").and().formLogin();
	 * 
	 * }
	 */

}
